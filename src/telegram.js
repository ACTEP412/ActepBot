import c from 'chalk';
import { Telegraf } from 'telegraf';
import { Keyboard } from 'telegram-keyboard';
import { setConst, load, updateFile, getConst } from './storage.js';
import { log } from './log.js';

class TelegramBot {
    constructor(token) {
        this.bot = new Telegraf(token);

        process.once('SIGINT', () => this.bot.stop('SIGINT'));
        process.once('SIGTERM', () => this.bot.stop('SIGTERM'));
    }

    async run() {
        this.setupListeners();
        await this.setupBot();

        this.bot.launch();
        log(`–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ telegram –±–æ—Ç–∞ ${c.yellowBright(this.botInfo.username)} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ.`, 'g');
    }

    async setupBot() {
        this.botInfo = await this.bot.telegram.getMe();
        this.bot.options.username = this.botInfo.username;

        this.mainKeyboard = this.getMainKeyboard();
        this.editGoodsKeyboard = this.getEditGoodsKeyboard();
        this.selectIssueTypeKeyboard = this.getSelectIssueTypeKeyboard();
        this.backKeyboard = this.getBackKeyboard();

        this.waitingForLotDelete = true;
        this.waitingForLotName = false;
        this.waitingForLotContent = false;
        this.lotType = '';
        this.lotName = '';
        this.lotContent = '';
        this.products = [];
    }

    setupListeners() {
        this.bot.on('text', (ctx) => this.onMessage(ctx));
        this.bot.on('inline_query', (ctx) => this.onInlineQuery(ctx));
    }
    
    async onMessage(ctx) {
        try {
            const msg = ctx.update.message.text;

            if(!this.isUserAuthed(ctx) && msg == global.settings.token) {
                setConst('telegramUserName', ctx.update.message.from.username);
                ctx.reply('–Ø –≤–∑–ª–æ–º–∞–ª —Ç–µ–±—è! –ë—Ä–∞—Ç —è —à—É—á—É. –¢–µ–ø–µ—Ä—å —Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º.', this.mainKeyboard.reply());
                return;
            }
            
            if(!this.isUserAuthed(ctx)) {
                ctx.reply('–ë—Ä–∞—Ç–∞–Ω –ø—Ä–∏—à–ª–∏ –º–Ω–µ golden_key, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –≤–≤–æ–¥–∏–ª –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.');
                return;
            }
    
            if(msg == '–°—Ç–∞—Ç—É—Å') {
                this.replyStatus(ctx);
                return;
            }
    
            if(msg == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–≤—ã–¥–∞—á—É') {
                this.editAutoIssue(ctx);
                return;
            }

            if(msg == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è') {
                this.getInfo(ctx);
                return;
            }

            if(msg == '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä') {
                this.addProduct(ctx);
                return;
            }

            if(msg == '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä') {
                this.removeProduct(ctx);
                return;
            }

            if(msg == '–í—ã–¥–∞—á–∞ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —Ç–µ–∫—Å—Ç–∞. (–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è)') {
                this.lotType = 'instruction';
                this.addProductName(ctx);
                return;
            }

            if(msg == '–í—ã–¥–∞—á–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏. (–ê–∫–∫–∞—É–Ω—Ç—ã') {
                this.lotType = 'accounts';
                this.addProductName(ctx);
                return;
            }

            if(msg == '–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è') {
                await this.getAutoIssueFile(ctx);
                return;
            }

            if(msg == '–ù–∞–∑–∞–¥') {
                await this.back(ctx);
                return;
            }

            if(this.waitingForLotName) {
                await this.saveLotName(ctx);
                return;
            }

            if(this.waitingForLotContent) {
                await this.saveLotContent(ctx);
                return;
            }

            if(this.waitingForLotDelete) {
                await this.deleteLot(ctx);
                return;
            }

            this.waitingForLotName = false;
            this.waitingForLotContent = false;
            this.waitingForLotDelete = false;
            
            ctx.reply('–ú–µ–Ω—é', this.mainKeyboard.reply());
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ telegram —Å–æ–æ–±—â–µ–Ω–∏—è: ${err}`, 'r');
            ctx.reply(`–ë—Ä–∞—Ç–∞–Ω, —è —Å–ª–æ–≤–∏–ª –æ—à–∏–±–∫—É, –∏—Å–ø—Ä–∞–≤—å —ç—Ç–æ! –í–æ—Ç —á—Ç–æ –º–Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ: ${err}`, this.mainKeyboard.reply());
        }
    }

    isUserAuthed(ctx) {
        if(global.settings.telegramUserName == ctx.update.message.from.username) return true;
        return false;
    }

    getMainKeyboard() {
        const keyboard = Keyboard.make([
            ['–°—Ç–∞—Ç—É—Å'],
            ['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–≤—ã–¥–∞—á—É'],
            ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
        ]);

        return keyboard;
    }

    getEditGoodsKeyboard() {
        const keyboard = Keyboard.make([
            ['–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä'],
            ['–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'],
            ['–ù–∞–∑–∞–¥']
        ]);

        return keyboard;
    }

    getSelectIssueTypeKeyboard() {
        const keyboard = Keyboard.make([
            ['–í—ã–¥–∞—á–∞ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —Ç–µ–∫—Å—Ç–∞ (–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è)'],
            ['–í—ã–¥–∞—á–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏ (–ê–∫–∫–∞—É–Ω—Ç—ã)'],
            ['–ù–∞–∑–∞–¥']
        ]);

        return keyboard;
    }

    getBackKeyboard() {
        const keyboard = Keyboard.make([
            ['–ù–∞–∑–∞–¥']
        ]);

        return keyboard;
    }

    async replyStatus(ctx) {
        const time = new Date().getTime();
        const difference = time - global.startTime;
        const workTime = new Date(difference).toISOString().slice(11, 19);

        const autoIssue = (global.settings.autoIssue) ? '–í–∫–ª' : '–í—ã–∫–ª';
        const alwaysOnline = (global.settings.alwaysOnline) ? '–í–∫–ª' : '–í—ã–∫–ª';
        const lotsRaise = (global.settings.lotsRaise) ? '–í–∫–ª' : '–í—ã–∫–ª';
        const goodsStateCheck = (global.settings.goodsStateCheck) ? '–í–∫–ª' : '–í—ã–∫–ª';
        const autoResponse = (global.settings.autoResponse) ? '–í–∫–ª' : '–í—ã–∫–ª';

        const msg = `<b>–°—Ç–∞—Ç—É—Å</b>\n\nüîë –ê–∫–∫–∞—É–Ω—Ç: <code>${global.appData.userName}</code>\nüïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <code>${workTime}</code>\n‚è≤ –í–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω: <code>${alwaysOnline}</code>\nüëæ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç: <code>${autoResponse}</code>\nüöÄ –ê–≤—Ç–æ–≤—ã–¥–∞—á–∞: <code>${autoIssue}</code>\nüèÜ –ê–≤—Ç–æ–ø–æ–¥–Ω—è—Ç–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: <code>${lotsRaise}</code>\nüî® –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: <code>${goodsStateCheck}</code>\n\n<i>${global.settings.telegramUserName}</i>`;
        ctx.replyWithHTML(msg, this.mainKeyboard.reply());
    }

    async editAutoIssue(ctx) {
        try {
            const goods = await load('data/autoIssueGoods.json');
            let goodsStr = '';

            let msg = `<b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</b>`;
            await ctx.replyWithHTML(msg, this.editGoodsKeyboard.reply());
    
            for(let i = 0; i < goods.length; i++) {
                goodsStr += `[${i + 1}] ${goods[i].name}\n`;
    
                if(goodsStr.length > 3000) {
                    await ctx.replyWithHTML(goodsStr, this.editGoodsKeyboard.reply());
                    goodsStr = '';
                }

                if(i == (goods.length - 1)) {
                    await ctx.replyWithHTML(goodsStr, this.editGoodsKeyboard.reply());
                }
            }
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: ${err}`, 'r');
        }
    }

    getInfo(ctx) {
        const msg = `‚ùî <b>ActepBot</b> ‚ùî\n\n<b>ActepBot</b> - —ç—Ç–æ –±–æ—Ç –¥–ª—è funpay —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π <b>ArmenShop</b>.\n\n<a href="https://github.com/ACTEP412">GitHub</a> | <a href="https://github.com/ACTEP412"></a>`;
        ctx.replyWithHTML(msg);
    }

    addProduct(ctx) {
        ctx.replyWithHTML(`–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è`, this.selectIssueTypeKeyboard.reply());
    }

    addProductName(ctx) {
        ctx.replyWithHTML(`–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ú–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏–∑ funpay. –≠–º–æ–¥–∑–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.`);
        this.waitingForLotName = true;
    }

    removeProduct(ctx) {
        ctx.replyWithHTML(`–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏.`);
        this.waitingForLotDelete = true;
    }

    async back(ctx) {
        this.waitingForLotName = false;
        this.waitingForLotContent = false;
        this.waitingForLotDelete = false;

        if(this.products.length > 0) {
            let goods = await load('data/autoIssueGoods.json');

            const product = {
                "name": this.lotName,
                "nodes": this.products
            }

            goods.push(product);
            await updateFile(goods, 'data/autoIssueGoods.json');
            this.products = [];
        }

        ctx.reply('–ú–µ–Ω—é', this.mainKeyboard.reply());
    }

    async saveLotName(ctx) {
        const msg = ctx.update.message.text;

        this.waitingForLotName = false;
        this.lotName = msg;

        let replyMessage = '–ü–æ–Ω—è–ª. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.';
        if(this.lotType == 'accounts') {
            replyMessage = '–ü–æ–Ω—è–ª. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã. –¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–æ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏. –ù–∞–∂–º–∏ "–ù–∞–∑–∞–¥" –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ç–æ–≤–∞—Ä.';
        }

        ctx.reply(replyMessage, this.backKeyboard.reply());
        this.waitingForLotContent = true;
    }

    async saveLotContent(ctx) {
        const msg = ctx.update.message.text;

        this.lotContent = msg;
        let keyboard = this.backKeyboard;
        let goods = await load('data/autoIssueGoods.json');

        if(this.lotType != 'accounts') {
            this.waitingForLotContent = false;
            keyboard = this.mainKeyboard;

            const product = {
                "name": this.lotName,
                "message": this.lotContent
            }
    
            goods.push(product);
            await updateFile(goods, 'data/autoIssueGoods.json');

            this.lotName = '';
            this.lotContent = '';
        } else {
            keyboard = this.backKeyboard;

            this.products.push(msg);
        }

        ctx.reply(`–ë—Ä–∞—Ç–∞–Ω, —è —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ç–æ–≤–∞—Ä.`, keyboard.reply());
    }

    async deleteLot(ctx) {
        const msg = ctx.update.message.text;
        this.waitingForLotDelete = false;

        let num = Number(msg);
        if(isNaN(num)) {
            ctx.reply(`–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å –±—Ä–∞—Ç. –í–µ—Ä–Ω—É —Ç–µ–±—è –≤ –º–µ–Ω—é.`, this.mainKeyboard.reply());
            return;
        }

        let goods = await load('data/autoIssueGoods.json');
        if(num > goods.length || num < 0) {
            ctx.reply(`–¢–∞–∫–æ–π —Ü–∏—Ñ—Ä—ã –Ω–µ—Ç—É –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏. –í–µ—Ä–Ω—É —Ç–µ–±—è –≤ –º–µ–Ω—é.`, this.mainKeyboard.reply());
            return;
        }

        let name = goods[num - 1].name;
        goods.splice(num - 1, 1);
        await updateFile(goods, 'data/autoIssueGoods.json');

        ctx.reply(`–ë—Ä–∞—Ç–∞–Ω, —è —É–¥–∞–ª–∏–ª —Ç–æ–≤–∞—Ä "${name}" –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏.`, this.mainKeyboard.reply());
    }

    async getAutoIssueFile(ctx) {
        let contents = await getConst('autoIssueFilePath');

        ctx.replyWithDocument({
            source: contents,
            filename: 'autoIssueGoods.json'
        }).catch(function(error) { log(error); })
    }

    async onInlineQuery(ctx) {
        console.log(ctx);
    }
}

export default TelegramBot;
